# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Chain {
    "story factory address"
    factoryAddress: String!
    "chain readable name"
    name: String!
    "chain identifier"
    type: String!
}

type IpfsResult {
    cid: String!
    url: String!
}

type Jwt {
    expiresIn: Int!
    token: String!
}

type Mutation {
    login(account: String!, chain: String!, message: String!, signature: String!): Jwt!
    metadataUriPrefix(amount: Int!, chain: String!, description: String!, image: String!, name: String!): IpfsResult!
}

type NftSale {
    authorClaimed: Int!
    authorReserved: Int!
    chain: String!
    chainStoryId: String!
    createTime: DateTime!
    name: String!
    nftSaleAddr: String!
    price: Int!
    sold: Int!
    total: Int!
    type: Float!
    updateTime: DateTime!
    uriPrefix: String!
}

type Query {
    chains: [Chain!]!
    chapter(id: Int!): StoryChapter!
    "return user info if x-token is valid."
    currentUser: User
    stories(author: [String!], chain: [String!], sort: StorySort): [Story!]!
    story(chain: String!, chainStoryId: String!): Story
}

type Story {
    author: String!
    chain: String!
    chainInfo: Chain!
    chainStoryId: String!
    contentHash: String!
    createTime: DateTime!
    info: StoryInfo
    nft: NftSale
    onChainAddr: String!
    updateTime: DateTime!
}

type StoryChapter {
    content: String!
    createAt: DateTime!
    id: Int!
    info: StoryInfo!
    name: String!
    updateAt: DateTime!
}

type StoryInfo {
    chain: String!
    chainStoryId: String!
    chapters: [StoryChapter!]!
    contentHash: String!
    cover: String!
    createAt: DateTime!
    description: String!
    id: Int!
    title: String!
    updateAt: DateTime!
}

type User {
    account: String!
    chain: String!
}

enum StorySort {
    Hotest
    Latest
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
